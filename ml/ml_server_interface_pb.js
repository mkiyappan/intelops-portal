// source: ml/ml_server_interface.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.experiment.ml_server.AgentNotification', null, global);
goog.exportSymbol('proto.experiment.ml_server.Agents', null, global);
goog.exportSymbol('proto.experiment.ml_server.ClientCredentials', null, global);
goog.exportSymbol('proto.experiment.ml_server.ClientDetails', null, global);
goog.exportSymbol('proto.experiment.ml_server.Cpu', null, global);
goog.exportSymbol('proto.experiment.ml_server.DataCollectorNotification', null, global);
goog.exportSymbol('proto.experiment.ml_server.DataCollectorNotificationResponce', null, global);
goog.exportSymbol('proto.experiment.ml_server.Email', null, global);
goog.exportSymbol('proto.experiment.ml_server.Experiment', null, global);
goog.exportSymbol('proto.experiment.ml_server.ExperimentDetails', null, global);
goog.exportSymbol('proto.experiment.ml_server.ExperimentSetupRequest', null, global);
goog.exportSymbol('proto.experiment.ml_server.ExperimentSetupResponse', null, global);
goog.exportSymbol('proto.experiment.ml_server.Experiments', null, global);
goog.exportSymbol('proto.experiment.ml_server.GitParams', null, global);
goog.exportSymbol('proto.experiment.ml_server.Iteration', null, global);
goog.exportSymbol('proto.experiment.ml_server.IterationReq', null, global);
goog.exportSymbol('proto.experiment.ml_server.IterationResp', null, global);
goog.exportSymbol('proto.experiment.ml_server.Iterations', null, global);
goog.exportSymbol('proto.experiment.ml_server.IterationsDetails', null, global);
goog.exportSymbol('proto.experiment.ml_server.Limit', null, global);
goog.exportSymbol('proto.experiment.ml_server.Memory', null, global);
goog.exportSymbol('proto.experiment.ml_server.Null', null, global);
goog.exportSymbol('proto.experiment.ml_server.ResourceLimits', null, global);
goog.exportSymbol('proto.experiment.ml_server.ResourceUsage', null, global);
goog.exportSymbol('proto.experiment.ml_server.SetupDetails', null, global);
goog.exportSymbol('proto.experiment.ml_server.SetupName', null, global);
goog.exportSymbol('proto.experiment.ml_server.SetupTemplate', null, global);
goog.exportSymbol('proto.experiment.ml_server.TerminationResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.ClientDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.ClientDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.ClientDetails.displayName = 'proto.experiment.ml_server.ClientDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.ClientCredentials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.ClientCredentials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.ClientCredentials.displayName = 'proto.experiment.ml_server.ClientCredentials';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Agents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.experiment.ml_server.Agents.repeatedFields_, null);
};
goog.inherits(proto.experiment.ml_server.Agents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Agents.displayName = 'proto.experiment.ml_server.Agents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Email = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.Email, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Email.displayName = 'proto.experiment.ml_server.Email';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.SetupName = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.SetupName, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.SetupName.displayName = 'proto.experiment.ml_server.SetupName';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Limit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.Limit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Limit.displayName = 'proto.experiment.ml_server.Limit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Null = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.Null, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Null.displayName = 'proto.experiment.ml_server.Null';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Cpu = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.Cpu, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Cpu.displayName = 'proto.experiment.ml_server.Cpu';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Memory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.Memory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Memory.displayName = 'proto.experiment.ml_server.Memory';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.ResourceLimits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.ResourceLimits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.ResourceLimits.displayName = 'proto.experiment.ml_server.ResourceLimits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.GitParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.GitParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.GitParams.displayName = 'proto.experiment.ml_server.GitParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.ExperimentSetupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.ExperimentSetupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.ExperimentSetupRequest.displayName = 'proto.experiment.ml_server.ExperimentSetupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.ResourceUsage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.ResourceUsage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.ResourceUsage.displayName = 'proto.experiment.ml_server.ResourceUsage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.IterationsDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.IterationsDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.IterationsDetails.displayName = 'proto.experiment.ml_server.IterationsDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Iterations = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.experiment.ml_server.Iterations.repeatedFields_, null);
};
goog.inherits(proto.experiment.ml_server.Iterations, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Iterations.displayName = 'proto.experiment.ml_server.Iterations';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.IterationReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.IterationReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.IterationReq.displayName = 'proto.experiment.ml_server.IterationReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.IterationResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.experiment.ml_server.IterationResp.repeatedFields_, null);
};
goog.inherits(proto.experiment.ml_server.IterationResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.IterationResp.displayName = 'proto.experiment.ml_server.IterationResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.ExperimentSetupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.experiment.ml_server.ExperimentSetupResponse.repeatedFields_, null);
};
goog.inherits(proto.experiment.ml_server.ExperimentSetupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.ExperimentSetupResponse.displayName = 'proto.experiment.ml_server.ExperimentSetupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.SetupTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.experiment.ml_server.SetupTemplate.repeatedFields_, null);
};
goog.inherits(proto.experiment.ml_server.SetupTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.SetupTemplate.displayName = 'proto.experiment.ml_server.SetupTemplate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.SetupDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.SetupDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.SetupDetails.displayName = 'proto.experiment.ml_server.SetupDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Experiments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.experiment.ml_server.Experiments.repeatedFields_, null);
};
goog.inherits(proto.experiment.ml_server.Experiments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Experiments.displayName = 'proto.experiment.ml_server.Experiments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.ExperimentDetails = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.ExperimentDetails, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.ExperimentDetails.displayName = 'proto.experiment.ml_server.ExperimentDetails';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Experiment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.Experiment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Experiment.displayName = 'proto.experiment.ml_server.Experiment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.Iteration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.Iteration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.Iteration.displayName = 'proto.experiment.ml_server.Iteration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.TerminationResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.TerminationResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.TerminationResp.displayName = 'proto.experiment.ml_server.TerminationResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.AgentNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.AgentNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.AgentNotification.displayName = 'proto.experiment.ml_server.AgentNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.DataCollectorNotification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.DataCollectorNotification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.DataCollectorNotification.displayName = 'proto.experiment.ml_server.DataCollectorNotification';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.experiment.ml_server.DataCollectorNotificationResponce = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.experiment.ml_server.DataCollectorNotificationResponce, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.experiment.ml_server.DataCollectorNotificationResponce.displayName = 'proto.experiment.ml_server.DataCollectorNotificationResponce';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.ClientDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.ClientDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.ClientDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ClientDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    email: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.ClientDetails}
 */
proto.experiment.ml_server.ClientDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.ClientDetails;
  return proto.experiment.ml_server.ClientDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.ClientDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.ClientDetails}
 */
proto.experiment.ml_server.ClientDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.ClientDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.ClientDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.ClientDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ClientDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.experiment.ml_server.ClientDetails.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientDetails} returns this
 */
proto.experiment.ml_server.ClientDetails.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string email = 2;
 * @return {string}
 */
proto.experiment.ml_server.ClientDetails.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientDetails} returns this
 */
proto.experiment.ml_server.ClientDetails.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.ClientCredentials.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.ClientCredentials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.ClientCredentials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ClientCredentials.toObject = function(includeInstance, msg) {
  var f, obj = {
    agentid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    clientsecret: jspb.Message.getFieldWithDefault(msg, 3, ""),
    token: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    email: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.ClientCredentials}
 */
proto.experiment.ml_server.ClientCredentials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.ClientCredentials;
  return proto.experiment.ml_server.ClientCredentials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.ClientCredentials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.ClientCredentials}
 */
proto.experiment.ml_server.ClientCredentials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientsecret(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.ClientCredentials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.ClientCredentials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.ClientCredentials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ClientCredentials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getClientsecret();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string agentID = 1;
 * @return {string}
 */
proto.experiment.ml_server.ClientCredentials.prototype.getAgentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientCredentials} returns this
 */
proto.experiment.ml_server.ClientCredentials.prototype.setAgentid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientID = 2;
 * @return {string}
 */
proto.experiment.ml_server.ClientCredentials.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientCredentials} returns this
 */
proto.experiment.ml_server.ClientCredentials.prototype.setClientid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string clientSecret = 3;
 * @return {string}
 */
proto.experiment.ml_server.ClientCredentials.prototype.getClientsecret = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientCredentials} returns this
 */
proto.experiment.ml_server.ClientCredentials.prototype.setClientsecret = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string token = 4;
 * @return {string}
 */
proto.experiment.ml_server.ClientCredentials.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientCredentials} returns this
 */
proto.experiment.ml_server.ClientCredentials.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.experiment.ml_server.ClientCredentials.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientCredentials} returns this
 */
proto.experiment.ml_server.ClientCredentials.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string email = 6;
 * @return {string}
 */
proto.experiment.ml_server.ClientCredentials.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ClientCredentials} returns this
 */
proto.experiment.ml_server.ClientCredentials.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.experiment.ml_server.Agents.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Agents.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Agents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Agents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Agents.toObject = function(includeInstance, msg) {
  var f, obj = {
    agentList: jspb.Message.toObjectList(msg.getAgentList(),
    proto.experiment.ml_server.ClientCredentials.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Agents}
 */
proto.experiment.ml_server.Agents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Agents;
  return proto.experiment.ml_server.Agents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Agents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Agents}
 */
proto.experiment.ml_server.Agents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = new proto.experiment.ml_server.ClientCredentials;
      reader.readMessage(value,proto.experiment.ml_server.ClientCredentials.deserializeBinaryFromReader);
      msg.addAgent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Agents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Agents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Agents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Agents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.experiment.ml_server.ClientCredentials.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClientCredentials agent = 6;
 * @return {!Array<!proto.experiment.ml_server.ClientCredentials>}
 */
proto.experiment.ml_server.Agents.prototype.getAgentList = function() {
  return /** @type{!Array<!proto.experiment.ml_server.ClientCredentials>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.experiment.ml_server.ClientCredentials, 6));
};


/**
 * @param {!Array<!proto.experiment.ml_server.ClientCredentials>} value
 * @return {!proto.experiment.ml_server.Agents} returns this
*/
proto.experiment.ml_server.Agents.prototype.setAgentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.experiment.ml_server.ClientCredentials=} opt_value
 * @param {number=} opt_index
 * @return {!proto.experiment.ml_server.ClientCredentials}
 */
proto.experiment.ml_server.Agents.prototype.addAgent = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.experiment.ml_server.ClientCredentials, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.experiment.ml_server.Agents} returns this
 */
proto.experiment.ml_server.Agents.prototype.clearAgentList = function() {
  return this.setAgentList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Email.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Email.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Email} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Email.toObject = function(includeInstance, msg) {
  var f, obj = {
    email: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Email}
 */
proto.experiment.ml_server.Email.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Email;
  return proto.experiment.ml_server.Email.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Email} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Email}
 */
proto.experiment.ml_server.Email.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Email.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Email.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Email} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Email.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string email = 1;
 * @return {string}
 */
proto.experiment.ml_server.Email.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Email} returns this
 */
proto.experiment.ml_server.Email.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.SetupName.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.SetupName.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.SetupName} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.SetupName.toObject = function(includeInstance, msg) {
  var f, obj = {
    setupname: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.SetupName}
 */
proto.experiment.ml_server.SetupName.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.SetupName;
  return proto.experiment.ml_server.SetupName.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.SetupName} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.SetupName}
 */
proto.experiment.ml_server.SetupName.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetupname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.SetupName.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.SetupName.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.SetupName} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.SetupName.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetupname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string setupName = 1;
 * @return {string}
 */
proto.experiment.ml_server.SetupName.prototype.getSetupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.SetupName} returns this
 */
proto.experiment.ml_server.SetupName.prototype.setSetupname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Limit.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Limit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Limit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Limit.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, ""),
    max: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Limit}
 */
proto.experiment.ml_server.Limit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Limit;
  return proto.experiment.ml_server.Limit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Limit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Limit}
 */
proto.experiment.ml_server.Limit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Limit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Limit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Limit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Limit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMax();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string min = 1;
 * @return {string}
 */
proto.experiment.ml_server.Limit.prototype.getMin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Limit} returns this
 */
proto.experiment.ml_server.Limit.prototype.setMin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string max = 2;
 * @return {string}
 */
proto.experiment.ml_server.Limit.prototype.getMax = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Limit} returns this
 */
proto.experiment.ml_server.Limit.prototype.setMax = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Null.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Null.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Null} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Null.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Null}
 */
proto.experiment.ml_server.Null.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Null;
  return proto.experiment.ml_server.Null.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Null} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Null}
 */
proto.experiment.ml_server.Null.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Null.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Null.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Null} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Null.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Cpu.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Cpu.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Cpu} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Cpu.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, ""),
    request: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Cpu}
 */
proto.experiment.ml_server.Cpu.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Cpu;
  return proto.experiment.ml_server.Cpu.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Cpu} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Cpu}
 */
proto.experiment.ml_server.Cpu.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Cpu.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Cpu.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Cpu} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Cpu.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string limit = 1;
 * @return {string}
 */
proto.experiment.ml_server.Cpu.prototype.getLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Cpu} returns this
 */
proto.experiment.ml_server.Cpu.prototype.setLimit = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request = 2;
 * @return {string}
 */
proto.experiment.ml_server.Cpu.prototype.getRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Cpu} returns this
 */
proto.experiment.ml_server.Cpu.prototype.setRequest = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Memory.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Memory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Memory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Memory.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, ""),
    request: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Memory}
 */
proto.experiment.ml_server.Memory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Memory;
  return proto.experiment.ml_server.Memory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Memory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Memory}
 */
proto.experiment.ml_server.Memory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Memory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Memory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Memory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Memory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRequest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string limit = 1;
 * @return {string}
 */
proto.experiment.ml_server.Memory.prototype.getLimit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Memory} returns this
 */
proto.experiment.ml_server.Memory.prototype.setLimit = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string request = 2;
 * @return {string}
 */
proto.experiment.ml_server.Memory.prototype.getRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Memory} returns this
 */
proto.experiment.ml_server.Memory.prototype.setRequest = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.ResourceLimits.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.ResourceLimits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.ResourceLimits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ResourceLimits.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpu: (f = msg.getCpu()) && proto.experiment.ml_server.Cpu.toObject(includeInstance, f),
    memory: (f = msg.getMemory()) && proto.experiment.ml_server.Memory.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.ResourceLimits}
 */
proto.experiment.ml_server.ResourceLimits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.ResourceLimits;
  return proto.experiment.ml_server.ResourceLimits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.ResourceLimits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.ResourceLimits}
 */
proto.experiment.ml_server.ResourceLimits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.experiment.ml_server.Cpu;
      reader.readMessage(value,proto.experiment.ml_server.Cpu.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 2:
      var value = new proto.experiment.ml_server.Memory;
      reader.readMessage(value,proto.experiment.ml_server.Memory.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.ResourceLimits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.ResourceLimits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.ResourceLimits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ResourceLimits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.experiment.ml_server.Cpu.serializeBinaryToWriter
    );
  }
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.experiment.ml_server.Memory.serializeBinaryToWriter
    );
  }
};


/**
 * optional Cpu cpu = 1;
 * @return {?proto.experiment.ml_server.Cpu}
 */
proto.experiment.ml_server.ResourceLimits.prototype.getCpu = function() {
  return /** @type{?proto.experiment.ml_server.Cpu} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.Cpu, 1));
};


/**
 * @param {?proto.experiment.ml_server.Cpu|undefined} value
 * @return {!proto.experiment.ml_server.ResourceLimits} returns this
*/
proto.experiment.ml_server.ResourceLimits.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.ResourceLimits} returns this
 */
proto.experiment.ml_server.ResourceLimits.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.ResourceLimits.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Memory memory = 2;
 * @return {?proto.experiment.ml_server.Memory}
 */
proto.experiment.ml_server.ResourceLimits.prototype.getMemory = function() {
  return /** @type{?proto.experiment.ml_server.Memory} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.Memory, 2));
};


/**
 * @param {?proto.experiment.ml_server.Memory|undefined} value
 * @return {!proto.experiment.ml_server.ResourceLimits} returns this
*/
proto.experiment.ml_server.ResourceLimits.prototype.setMemory = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.ResourceLimits} returns this
 */
proto.experiment.ml_server.ResourceLimits.prototype.clearMemory = function() {
  return this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.ResourceLimits.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.GitParams.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.GitParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.GitParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.GitParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: jspb.Message.getFieldWithDefault(msg, 2, ""),
    token: jspb.Message.getFieldWithDefault(msg, 3, ""),
    branch: jspb.Message.getFieldWithDefault(msg, 4, ""),
    path: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.GitParams}
 */
proto.experiment.ml_server.GitParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.GitParams;
  return proto.experiment.ml_server.GitParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.GitParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.GitParams}
 */
proto.experiment.ml_server.GitParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBranch(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.GitParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.GitParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.GitParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.GitParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBranch();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.experiment.ml_server.GitParams.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.GitParams} returns this
 */
proto.experiment.ml_server.GitParams.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user = 2;
 * @return {string}
 */
proto.experiment.ml_server.GitParams.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.GitParams} returns this
 */
proto.experiment.ml_server.GitParams.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.experiment.ml_server.GitParams.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.GitParams} returns this
 */
proto.experiment.ml_server.GitParams.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string branch = 4;
 * @return {string}
 */
proto.experiment.ml_server.GitParams.prototype.getBranch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.GitParams} returns this
 */
proto.experiment.ml_server.GitParams.prototype.setBranch = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string path = 5;
 * @return {string}
 */
proto.experiment.ml_server.GitParams.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.GitParams} returns this
 */
proto.experiment.ml_server.GitParams.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.ExperimentSetupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.ExperimentSetupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ExperimentSetupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    agentdetailsMap: (f = msg.getAgentdetailsMap()) ? f.toObject(includeInstance, undefined) : [],
    applicationdetailsMap: (f = msg.getApplicationdetailsMap()) ? f.toObject(includeInstance, undefined) : [],
    noofiterations: jspb.Message.getFieldWithDefault(msg, 3, 0),
    cpu: (f = msg.getCpu()) && proto.experiment.ml_server.Limit.toObject(includeInstance, f),
    memory: (f = msg.getMemory()) && proto.experiment.ml_server.Limit.toObject(includeInstance, f),
    initiallimits: (f = msg.getInitiallimits()) && proto.experiment.ml_server.ResourceLimits.toObject(includeInstance, f),
    agentaddress: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mldatacollectoraddress: jspb.Message.getFieldWithDefault(msg, 8, ""),
    kustomizationparams: (f = msg.getKustomizationparams()) && proto.experiment.ml_server.GitParams.toObject(includeInstance, f),
    testparams: (f = msg.getTestparams()) && proto.experiment.ml_server.GitParams.toObject(includeInstance, f),
    email: jspb.Message.getFieldWithDefault(msg, 11, ""),
    setupname: jspb.Message.getFieldWithDefault(msg, 12, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest}
 */
proto.experiment.ml_server.ExperimentSetupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.ExperimentSetupRequest;
  return proto.experiment.ml_server.ExperimentSetupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.ExperimentSetupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest}
 */
proto.experiment.ml_server.ExperimentSetupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getAgentdetailsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 2:
      var value = msg.getApplicationdetailsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNoofiterations(value);
      break;
    case 4:
      var value = new proto.experiment.ml_server.Limit;
      reader.readMessage(value,proto.experiment.ml_server.Limit.deserializeBinaryFromReader);
      msg.setCpu(value);
      break;
    case 5:
      var value = new proto.experiment.ml_server.Limit;
      reader.readMessage(value,proto.experiment.ml_server.Limit.deserializeBinaryFromReader);
      msg.setMemory(value);
      break;
    case 6:
      var value = new proto.experiment.ml_server.ResourceLimits;
      reader.readMessage(value,proto.experiment.ml_server.ResourceLimits.deserializeBinaryFromReader);
      msg.setInitiallimits(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentaddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMldatacollectoraddress(value);
      break;
    case 9:
      var value = new proto.experiment.ml_server.GitParams;
      reader.readMessage(value,proto.experiment.ml_server.GitParams.deserializeBinaryFromReader);
      msg.setKustomizationparams(value);
      break;
    case 10:
      var value = new proto.experiment.ml_server.GitParams;
      reader.readMessage(value,proto.experiment.ml_server.GitParams.deserializeBinaryFromReader);
      msg.setTestparams(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetupname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.ExperimentSetupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.ExperimentSetupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ExperimentSetupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgentdetailsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getApplicationdetailsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getNoofiterations();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getCpu();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.experiment.ml_server.Limit.serializeBinaryToWriter
    );
  }
  f = message.getMemory();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.experiment.ml_server.Limit.serializeBinaryToWriter
    );
  }
  f = message.getInitiallimits();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.experiment.ml_server.ResourceLimits.serializeBinaryToWriter
    );
  }
  f = message.getAgentaddress();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMldatacollectoraddress();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getKustomizationparams();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.experiment.ml_server.GitParams.serializeBinaryToWriter
    );
  }
  f = message.getTestparams();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.experiment.ml_server.GitParams.serializeBinaryToWriter
    );
  }
  f = message.getEmail();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getSetupname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
};


/**
 * map<string, string> agentDetails = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getAgentdetailsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.clearAgentdetailsMap = function() {
  this.getAgentdetailsMap().clear();
  return this;};


/**
 * map<string, string> applicationDetails = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getApplicationdetailsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.clearApplicationdetailsMap = function() {
  this.getApplicationdetailsMap().clear();
  return this;};


/**
 * optional int32 noOfIterations = 3;
 * @return {number}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getNoofiterations = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setNoofiterations = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Limit cpu = 4;
 * @return {?proto.experiment.ml_server.Limit}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getCpu = function() {
  return /** @type{?proto.experiment.ml_server.Limit} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.Limit, 4));
};


/**
 * @param {?proto.experiment.ml_server.Limit|undefined} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
*/
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setCpu = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.clearCpu = function() {
  return this.setCpu(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.hasCpu = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Limit memory = 5;
 * @return {?proto.experiment.ml_server.Limit}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getMemory = function() {
  return /** @type{?proto.experiment.ml_server.Limit} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.Limit, 5));
};


/**
 * @param {?proto.experiment.ml_server.Limit|undefined} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
*/
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setMemory = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.clearMemory = function() {
  return this.setMemory(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.hasMemory = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ResourceLimits initialLimits = 6;
 * @return {?proto.experiment.ml_server.ResourceLimits}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getInitiallimits = function() {
  return /** @type{?proto.experiment.ml_server.ResourceLimits} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.ResourceLimits, 6));
};


/**
 * @param {?proto.experiment.ml_server.ResourceLimits|undefined} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
*/
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setInitiallimits = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.clearInitiallimits = function() {
  return this.setInitiallimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.hasInitiallimits = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string AgentAddress = 7;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getAgentaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setAgentaddress = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string MLDataCollectorAddress = 8;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getMldatacollectoraddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setMldatacollectoraddress = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional GitParams kustomizationParams = 9;
 * @return {?proto.experiment.ml_server.GitParams}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getKustomizationparams = function() {
  return /** @type{?proto.experiment.ml_server.GitParams} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.GitParams, 9));
};


/**
 * @param {?proto.experiment.ml_server.GitParams|undefined} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
*/
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setKustomizationparams = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.clearKustomizationparams = function() {
  return this.setKustomizationparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.hasKustomizationparams = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional GitParams testParams = 10;
 * @return {?proto.experiment.ml_server.GitParams}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getTestparams = function() {
  return /** @type{?proto.experiment.ml_server.GitParams} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.GitParams, 10));
};


/**
 * @param {?proto.experiment.ml_server.GitParams|undefined} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
*/
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setTestparams = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.clearTestparams = function() {
  return this.setTestparams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.hasTestparams = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string email = 11;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setEmail = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string setupName = 12;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.getSetupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentSetupRequest} returns this
 */
proto.experiment.ml_server.ExperimentSetupRequest.prototype.setSetupname = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.ResourceUsage.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.ResourceUsage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.ResourceUsage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ResourceUsage.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpu: jspb.Message.getFieldWithDefault(msg, 1, ""),
    memory: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.ResourceUsage}
 */
proto.experiment.ml_server.ResourceUsage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.ResourceUsage;
  return proto.experiment.ml_server.ResourceUsage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.ResourceUsage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.ResourceUsage}
 */
proto.experiment.ml_server.ResourceUsage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCpu(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMemory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.ResourceUsage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.ResourceUsage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.ResourceUsage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ResourceUsage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpu();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMemory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cpu = 1;
 * @return {string}
 */
proto.experiment.ml_server.ResourceUsage.prototype.getCpu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ResourceUsage} returns this
 */
proto.experiment.ml_server.ResourceUsage.prototype.setCpu = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string memory = 2;
 * @return {string}
 */
proto.experiment.ml_server.ResourceUsage.prototype.getMemory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ResourceUsage} returns this
 */
proto.experiment.ml_server.ResourceUsage.prototype.setMemory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.IterationsDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.IterationsDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.IterationsDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.IterationsDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.experiment.ml_server.IterationReq.toObject(includeInstance, f),
    response: (f = msg.getResponse()) && proto.experiment.ml_server.IterationResp.toObject(includeInstance, f),
    iterationnumber: jspb.Message.getFieldWithDefault(msg, 3, 0),
    episodenumber: jspb.Message.getFieldWithDefault(msg, 4, 0),
    issuggested: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.IterationsDetails}
 */
proto.experiment.ml_server.IterationsDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.IterationsDetails;
  return proto.experiment.ml_server.IterationsDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.IterationsDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.IterationsDetails}
 */
proto.experiment.ml_server.IterationsDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.experiment.ml_server.IterationReq;
      reader.readMessage(value,proto.experiment.ml_server.IterationReq.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = new proto.experiment.ml_server.IterationResp;
      reader.readMessage(value,proto.experiment.ml_server.IterationResp.deserializeBinaryFromReader);
      msg.setResponse(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIterationnumber(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEpisodenumber(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuggested(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.IterationsDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.IterationsDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.IterationsDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.IterationsDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.experiment.ml_server.IterationReq.serializeBinaryToWriter
    );
  }
  f = message.getResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.experiment.ml_server.IterationResp.serializeBinaryToWriter
    );
  }
  f = message.getIterationnumber();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEpisodenumber();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIssuggested();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional IterationReq request = 1;
 * @return {?proto.experiment.ml_server.IterationReq}
 */
proto.experiment.ml_server.IterationsDetails.prototype.getRequest = function() {
  return /** @type{?proto.experiment.ml_server.IterationReq} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.IterationReq, 1));
};


/**
 * @param {?proto.experiment.ml_server.IterationReq|undefined} value
 * @return {!proto.experiment.ml_server.IterationsDetails} returns this
*/
proto.experiment.ml_server.IterationsDetails.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.IterationsDetails} returns this
 */
proto.experiment.ml_server.IterationsDetails.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.IterationsDetails.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IterationResp response = 2;
 * @return {?proto.experiment.ml_server.IterationResp}
 */
proto.experiment.ml_server.IterationsDetails.prototype.getResponse = function() {
  return /** @type{?proto.experiment.ml_server.IterationResp} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.IterationResp, 2));
};


/**
 * @param {?proto.experiment.ml_server.IterationResp|undefined} value
 * @return {!proto.experiment.ml_server.IterationsDetails} returns this
*/
proto.experiment.ml_server.IterationsDetails.prototype.setResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.IterationsDetails} returns this
 */
proto.experiment.ml_server.IterationsDetails.prototype.clearResponse = function() {
  return this.setResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.IterationsDetails.prototype.hasResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 IterationNumber = 3;
 * @return {number}
 */
proto.experiment.ml_server.IterationsDetails.prototype.getIterationnumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationsDetails} returns this
 */
proto.experiment.ml_server.IterationsDetails.prototype.setIterationnumber = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 EpisodeNumber = 4;
 * @return {number}
 */
proto.experiment.ml_server.IterationsDetails.prototype.getEpisodenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationsDetails} returns this
 */
proto.experiment.ml_server.IterationsDetails.prototype.setEpisodenumber = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool IsSuggested = 5;
 * @return {boolean}
 */
proto.experiment.ml_server.IterationsDetails.prototype.getIssuggested = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.experiment.ml_server.IterationsDetails} returns this
 */
proto.experiment.ml_server.IterationsDetails.prototype.setIssuggested = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.experiment.ml_server.Iterations.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Iterations.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Iterations.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Iterations} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Iterations.toObject = function(includeInstance, msg) {
  var f, obj = {
    iterationsList: jspb.Message.toObjectList(msg.getIterationsList(),
    proto.experiment.ml_server.ExperimentSetupResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Iterations}
 */
proto.experiment.ml_server.Iterations.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Iterations;
  return proto.experiment.ml_server.Iterations.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Iterations} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Iterations}
 */
proto.experiment.ml_server.Iterations.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.experiment.ml_server.ExperimentSetupResponse;
      reader.readMessage(value,proto.experiment.ml_server.ExperimentSetupResponse.deserializeBinaryFromReader);
      msg.addIterations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Iterations.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Iterations.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Iterations} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Iterations.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIterationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.experiment.ml_server.ExperimentSetupResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ExperimentSetupResponse iterations = 1;
 * @return {!Array<!proto.experiment.ml_server.ExperimentSetupResponse>}
 */
proto.experiment.ml_server.Iterations.prototype.getIterationsList = function() {
  return /** @type{!Array<!proto.experiment.ml_server.ExperimentSetupResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.experiment.ml_server.ExperimentSetupResponse, 1));
};


/**
 * @param {!Array<!proto.experiment.ml_server.ExperimentSetupResponse>} value
 * @return {!proto.experiment.ml_server.Iterations} returns this
*/
proto.experiment.ml_server.Iterations.prototype.setIterationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.experiment.ml_server.ExperimentSetupResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.experiment.ml_server.ExperimentSetupResponse}
 */
proto.experiment.ml_server.Iterations.prototype.addIterations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.experiment.ml_server.ExperimentSetupResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.experiment.ml_server.Iterations} returns this
 */
proto.experiment.ml_server.Iterations.prototype.clearIterationsList = function() {
  return this.setIterationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.IterationReq.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.IterationReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.IterationReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.IterationReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    iterationid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    experimentid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    limits: (f = msg.getLimits()) && proto.experiment.ml_server.ResourceLimits.toObject(includeInstance, f),
    setupreq: (f = msg.getSetupreq()) && proto.experiment.ml_server.ExperimentSetupRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.IterationReq}
 */
proto.experiment.ml_server.IterationReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.IterationReq;
  return proto.experiment.ml_server.IterationReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.IterationReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.IterationReq}
 */
proto.experiment.ml_server.IterationReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIterationid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExperimentid(value);
      break;
    case 3:
      var value = new proto.experiment.ml_server.ResourceLimits;
      reader.readMessage(value,proto.experiment.ml_server.ResourceLimits.deserializeBinaryFromReader);
      msg.setLimits(value);
      break;
    case 4:
      var value = new proto.experiment.ml_server.ExperimentSetupRequest;
      reader.readMessage(value,proto.experiment.ml_server.ExperimentSetupRequest.deserializeBinaryFromReader);
      msg.setSetupreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.IterationReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.IterationReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.IterationReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.IterationReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIterationid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExperimentid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLimits();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.experiment.ml_server.ResourceLimits.serializeBinaryToWriter
    );
  }
  f = message.getSetupreq();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.experiment.ml_server.ExperimentSetupRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string iterationID = 1;
 * @return {string}
 */
proto.experiment.ml_server.IterationReq.prototype.getIterationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.IterationReq} returns this
 */
proto.experiment.ml_server.IterationReq.prototype.setIterationid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string experimentID = 2;
 * @return {string}
 */
proto.experiment.ml_server.IterationReq.prototype.getExperimentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.IterationReq} returns this
 */
proto.experiment.ml_server.IterationReq.prototype.setExperimentid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ResourceLimits limits = 3;
 * @return {?proto.experiment.ml_server.ResourceLimits}
 */
proto.experiment.ml_server.IterationReq.prototype.getLimits = function() {
  return /** @type{?proto.experiment.ml_server.ResourceLimits} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.ResourceLimits, 3));
};


/**
 * @param {?proto.experiment.ml_server.ResourceLimits|undefined} value
 * @return {!proto.experiment.ml_server.IterationReq} returns this
*/
proto.experiment.ml_server.IterationReq.prototype.setLimits = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.IterationReq} returns this
 */
proto.experiment.ml_server.IterationReq.prototype.clearLimits = function() {
  return this.setLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.IterationReq.prototype.hasLimits = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ExperimentSetupRequest setupReq = 4;
 * @return {?proto.experiment.ml_server.ExperimentSetupRequest}
 */
proto.experiment.ml_server.IterationReq.prototype.getSetupreq = function() {
  return /** @type{?proto.experiment.ml_server.ExperimentSetupRequest} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.ExperimentSetupRequest, 4));
};


/**
 * @param {?proto.experiment.ml_server.ExperimentSetupRequest|undefined} value
 * @return {!proto.experiment.ml_server.IterationReq} returns this
*/
proto.experiment.ml_server.IterationReq.prototype.setSetupreq = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.IterationReq} returns this
 */
proto.experiment.ml_server.IterationReq.prototype.clearSetupreq = function() {
  return this.setSetupreq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.IterationReq.prototype.hasSetupreq = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.experiment.ml_server.IterationResp.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.IterationResp.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.IterationResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.IterationResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.IterationResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    iterationid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    experimentid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    request: (f = msg.getRequest()) && proto.experiment.ml_server.IterationReq.toObject(includeInstance, f),
    maxlimit: (f = msg.getMaxlimit()) && proto.experiment.ml_server.ResourceUsage.toObject(includeInstance, f),
    resourcelimitsList: jspb.Message.toObjectList(msg.getResourcelimitsList(),
    proto.experiment.ml_server.ResourceUsage.toObject, includeInstance),
    cpu: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    memory: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    envstatus: jspb.Message.getFieldWithDefault(msg, 9, 0),
    latency: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    nooferrors: jspb.Message.getFieldWithDefault(msg, 11, 0),
    nooffailures: jspb.Message.getFieldWithDefault(msg, 12, 0),
    nouserpersec: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    responsetime: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    successrate: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    totreq: jspb.Message.getFieldWithDefault(msg, 16, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.IterationResp}
 */
proto.experiment.ml_server.IterationResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.IterationResp;
  return proto.experiment.ml_server.IterationResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.IterationResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.IterationResp}
 */
proto.experiment.ml_server.IterationResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIterationid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setExperimentid(value);
      break;
    case 4:
      var value = new proto.experiment.ml_server.IterationReq;
      reader.readMessage(value,proto.experiment.ml_server.IterationReq.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 5:
      var value = new proto.experiment.ml_server.ResourceUsage;
      reader.readMessage(value,proto.experiment.ml_server.ResourceUsage.deserializeBinaryFromReader);
      msg.setMaxlimit(value);
      break;
    case 6:
      var value = new proto.experiment.ml_server.ResourceUsage;
      reader.readMessage(value,proto.experiment.ml_server.ResourceUsage.deserializeBinaryFromReader);
      msg.addResourcelimits(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCpu(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMemory(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnvstatus(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatency(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNooferrors(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNooffailures(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setNouserpersec(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setResponsetime(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSuccessrate(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotreq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.IterationResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.IterationResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.IterationResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.IterationResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIterationid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getExperimentid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.experiment.ml_server.IterationReq.serializeBinaryToWriter
    );
  }
  f = message.getMaxlimit();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.experiment.ml_server.ResourceUsage.serializeBinaryToWriter
    );
  }
  f = message.getResourcelimitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.experiment.ml_server.ResourceUsage.serializeBinaryToWriter
    );
  }
  f = message.getCpu();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getMemory();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getEnvstatus();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getLatency();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getNooferrors();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getNooffailures();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getNouserpersec();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getResponsetime();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getSuccessrate();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getTotreq();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.experiment.ml_server.IterationResp.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string iterationID = 2;
 * @return {string}
 */
proto.experiment.ml_server.IterationResp.prototype.getIterationid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setIterationid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string experimentID = 3;
 * @return {string}
 */
proto.experiment.ml_server.IterationResp.prototype.getExperimentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setExperimentid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional IterationReq request = 4;
 * @return {?proto.experiment.ml_server.IterationReq}
 */
proto.experiment.ml_server.IterationResp.prototype.getRequest = function() {
  return /** @type{?proto.experiment.ml_server.IterationReq} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.IterationReq, 4));
};


/**
 * @param {?proto.experiment.ml_server.IterationReq|undefined} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
*/
proto.experiment.ml_server.IterationResp.prototype.setRequest = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.IterationResp.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ResourceUsage maxLimit = 5;
 * @return {?proto.experiment.ml_server.ResourceUsage}
 */
proto.experiment.ml_server.IterationResp.prototype.getMaxlimit = function() {
  return /** @type{?proto.experiment.ml_server.ResourceUsage} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.ResourceUsage, 5));
};


/**
 * @param {?proto.experiment.ml_server.ResourceUsage|undefined} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
*/
proto.experiment.ml_server.IterationResp.prototype.setMaxlimit = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.clearMaxlimit = function() {
  return this.setMaxlimit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.IterationResp.prototype.hasMaxlimit = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated ResourceUsage resourceLimits = 6;
 * @return {!Array<!proto.experiment.ml_server.ResourceUsage>}
 */
proto.experiment.ml_server.IterationResp.prototype.getResourcelimitsList = function() {
  return /** @type{!Array<!proto.experiment.ml_server.ResourceUsage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.experiment.ml_server.ResourceUsage, 6));
};


/**
 * @param {!Array<!proto.experiment.ml_server.ResourceUsage>} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
*/
proto.experiment.ml_server.IterationResp.prototype.setResourcelimitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.experiment.ml_server.ResourceUsage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.experiment.ml_server.ResourceUsage}
 */
proto.experiment.ml_server.IterationResp.prototype.addResourcelimits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.experiment.ml_server.ResourceUsage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.clearResourcelimitsList = function() {
  return this.setResourcelimitsList([]);
};


/**
 * optional float Cpu = 7;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getCpu = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setCpu = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float Memory = 8;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getMemory = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setMemory = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional int32 EnvStatus = 9;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getEnvstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setEnvstatus = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional float Latency = 10;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setLatency = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional int32 NoOfErrors = 11;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getNooferrors = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setNooferrors = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 NoOfFailures = 12;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getNooffailures = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setNooffailures = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional float NoUserPerSec = 13;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getNouserpersec = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setNouserpersec = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float ResponseTime = 14;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getResponsetime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setResponsetime = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float SuccessRate = 15;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getSuccessrate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setSuccessrate = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional int32 TotReq = 16;
 * @return {number}
 */
proto.experiment.ml_server.IterationResp.prototype.getTotreq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.IterationResp} returns this
 */
proto.experiment.ml_server.IterationResp.prototype.setTotreq = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.experiment.ml_server.ExperimentSetupResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.ExperimentSetupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.ExperimentSetupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ExperimentSetupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    expId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, ""),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.experiment.ml_server.IterationsDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.ExperimentSetupResponse}
 */
proto.experiment.ml_server.ExperimentSetupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.ExperimentSetupResponse;
  return proto.experiment.ml_server.ExperimentSetupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.ExperimentSetupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.ExperimentSetupResponse}
 */
proto.experiment.ml_server.ExperimentSetupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 3:
      var value = new proto.experiment.ml_server.IterationsDetails;
      reader.readMessage(value,proto.experiment.ml_server.IterationsDetails.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.ExperimentSetupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.ExperimentSetupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ExperimentSetupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.experiment.ml_server.IterationsDetails.serializeBinaryToWriter
    );
  }
};


/**
 * optional string exp_id = 1;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.getExpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentSetupResponse} returns this
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.setExpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentSetupResponse} returns this
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated IterationsDetails results = 3;
 * @return {!Array<!proto.experiment.ml_server.IterationsDetails>}
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.experiment.ml_server.IterationsDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.experiment.ml_server.IterationsDetails, 3));
};


/**
 * @param {!Array<!proto.experiment.ml_server.IterationsDetails>} value
 * @return {!proto.experiment.ml_server.ExperimentSetupResponse} returns this
*/
proto.experiment.ml_server.ExperimentSetupResponse.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.experiment.ml_server.IterationsDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.experiment.ml_server.IterationsDetails}
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.experiment.ml_server.IterationsDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.experiment.ml_server.ExperimentSetupResponse} returns this
 */
proto.experiment.ml_server.ExperimentSetupResponse.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.experiment.ml_server.SetupTemplate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.SetupTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.SetupTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.SetupTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.SetupTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    setupdetailsList: jspb.Message.toObjectList(msg.getSetupdetailsList(),
    proto.experiment.ml_server.SetupDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.SetupTemplate}
 */
proto.experiment.ml_server.SetupTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.SetupTemplate;
  return proto.experiment.ml_server.SetupTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.SetupTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.SetupTemplate}
 */
proto.experiment.ml_server.SetupTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.experiment.ml_server.SetupDetails;
      reader.readMessage(value,proto.experiment.ml_server.SetupDetails.deserializeBinaryFromReader);
      msg.addSetupdetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.SetupTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.SetupTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.SetupTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.SetupTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetupdetailsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.experiment.ml_server.SetupDetails.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SetupDetails setupDetails = 1;
 * @return {!Array<!proto.experiment.ml_server.SetupDetails>}
 */
proto.experiment.ml_server.SetupTemplate.prototype.getSetupdetailsList = function() {
  return /** @type{!Array<!proto.experiment.ml_server.SetupDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.experiment.ml_server.SetupDetails, 1));
};


/**
 * @param {!Array<!proto.experiment.ml_server.SetupDetails>} value
 * @return {!proto.experiment.ml_server.SetupTemplate} returns this
*/
proto.experiment.ml_server.SetupTemplate.prototype.setSetupdetailsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.experiment.ml_server.SetupDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.experiment.ml_server.SetupDetails}
 */
proto.experiment.ml_server.SetupTemplate.prototype.addSetupdetails = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.experiment.ml_server.SetupDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.experiment.ml_server.SetupTemplate} returns this
 */
proto.experiment.ml_server.SetupTemplate.prototype.clearSetupdetailsList = function() {
  return this.setSetupdetailsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.SetupDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.SetupDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.SetupDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.SetupDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    applicationname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    setupname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.SetupDetails}
 */
proto.experiment.ml_server.SetupDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.SetupDetails;
  return proto.experiment.ml_server.SetupDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.SetupDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.SetupDetails}
 */
proto.experiment.ml_server.SetupDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplicationname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetupname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.SetupDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.SetupDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.SetupDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.SetupDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApplicationname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSetupname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ApplicationName = 1;
 * @return {string}
 */
proto.experiment.ml_server.SetupDetails.prototype.getApplicationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.SetupDetails} returns this
 */
proto.experiment.ml_server.SetupDetails.prototype.setApplicationname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string SetupName = 2;
 * @return {string}
 */
proto.experiment.ml_server.SetupDetails.prototype.getSetupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.SetupDetails} returns this
 */
proto.experiment.ml_server.SetupDetails.prototype.setSetupname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.experiment.ml_server.Experiments.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Experiments.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Experiments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Experiments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Experiments.toObject = function(includeInstance, msg) {
  var f, obj = {
    experimentsList: jspb.Message.toObjectList(msg.getExperimentsList(),
    proto.experiment.ml_server.ExperimentDetails.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Experiments}
 */
proto.experiment.ml_server.Experiments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Experiments;
  return proto.experiment.ml_server.Experiments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Experiments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Experiments}
 */
proto.experiment.ml_server.Experiments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.experiment.ml_server.ExperimentDetails;
      reader.readMessage(value,proto.experiment.ml_server.ExperimentDetails.deserializeBinaryFromReader);
      msg.addExperiments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Experiments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Experiments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Experiments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Experiments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExperimentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.experiment.ml_server.ExperimentDetails.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ExperimentDetails experiments = 1;
 * @return {!Array<!proto.experiment.ml_server.ExperimentDetails>}
 */
proto.experiment.ml_server.Experiments.prototype.getExperimentsList = function() {
  return /** @type{!Array<!proto.experiment.ml_server.ExperimentDetails>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.experiment.ml_server.ExperimentDetails, 1));
};


/**
 * @param {!Array<!proto.experiment.ml_server.ExperimentDetails>} value
 * @return {!proto.experiment.ml_server.Experiments} returns this
*/
proto.experiment.ml_server.Experiments.prototype.setExperimentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.experiment.ml_server.ExperimentDetails=} opt_value
 * @param {number=} opt_index
 * @return {!proto.experiment.ml_server.ExperimentDetails}
 */
proto.experiment.ml_server.Experiments.prototype.addExperiments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.experiment.ml_server.ExperimentDetails, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.experiment.ml_server.Experiments} returns this
 */
proto.experiment.ml_server.Experiments.prototype.clearExperimentsList = function() {
  return this.setExperimentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.ExperimentDetails.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.ExperimentDetails} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ExperimentDetails.toObject = function(includeInstance, msg) {
  var f, obj = {
    expid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    agentdetails: jspb.Message.getFieldWithDefault(msg, 2, ""),
    agentid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    applicationname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    status: jspb.Message.getFieldWithDefault(msg, 5, ""),
    createTime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    updateTime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    trailcount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    setupname: jspb.Message.getFieldWithDefault(msg, 9, ""),
    agentname: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.ExperimentDetails}
 */
proto.experiment.ml_server.ExperimentDetails.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.ExperimentDetails;
  return proto.experiment.ml_server.ExperimentDetails.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.ExperimentDetails} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.ExperimentDetails}
 */
proto.experiment.ml_server.ExperimentDetails.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentdetails(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplicationname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreateTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateTime(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrailcount(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetupname(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.ExperimentDetails.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.ExperimentDetails} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.ExperimentDetails.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAgentdetails();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAgentid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getApplicationname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreateTime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getUpdateTime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTrailcount();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getSetupname();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAgentname();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string expId = 1;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getExpid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setExpid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string AgentDetails = 2;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getAgentdetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setAgentdetails = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string AgentID = 3;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getAgentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setAgentid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ApplicationName = 4;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getApplicationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setApplicationname = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Status = 5;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 create_time = 6;
 * @return {number}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setCreateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 update_time = 7;
 * @return {number}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setUpdateTime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 TrailCount = 8;
 * @return {number}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getTrailcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setTrailcount = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string setupName = 9;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getSetupname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setSetupname = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string AgentName = 10;
 * @return {string}
 */
proto.experiment.ml_server.ExperimentDetails.prototype.getAgentname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.ExperimentDetails} returns this
 */
proto.experiment.ml_server.ExperimentDetails.prototype.setAgentname = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Experiment.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Experiment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Experiment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Experiment.toObject = function(includeInstance, msg) {
  var f, obj = {
    expId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Experiment}
 */
proto.experiment.ml_server.Experiment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Experiment;
  return proto.experiment.ml_server.Experiment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Experiment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Experiment}
 */
proto.experiment.ml_server.Experiment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExpId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Experiment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Experiment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Experiment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Experiment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string exp_id = 1;
 * @return {string}
 */
proto.experiment.ml_server.Experiment.prototype.getExpId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Experiment} returns this
 */
proto.experiment.ml_server.Experiment.prototype.setExpId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.Iteration.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.Iteration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.Iteration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Iteration.toObject = function(includeInstance, msg) {
  var f, obj = {
    itrId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.Iteration}
 */
proto.experiment.ml_server.Iteration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.Iteration;
  return proto.experiment.ml_server.Iteration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.Iteration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.Iteration}
 */
proto.experiment.ml_server.Iteration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setItrId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.Iteration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.Iteration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.Iteration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.Iteration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItrId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string itr_id = 1;
 * @return {string}
 */
proto.experiment.ml_server.Iteration.prototype.getItrId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.Iteration} returns this
 */
proto.experiment.ml_server.Iteration.prototype.setItrId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.TerminationResp.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.TerminationResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.TerminationResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.TerminationResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.TerminationResp}
 */
proto.experiment.ml_server.TerminationResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.TerminationResp;
  return proto.experiment.ml_server.TerminationResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.TerminationResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.TerminationResp}
 */
proto.experiment.ml_server.TerminationResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.TerminationResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.TerminationResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.TerminationResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.TerminationResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.experiment.ml_server.TerminationResp.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.TerminationResp} returns this
 */
proto.experiment.ml_server.TerminationResp.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.AgentNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.AgentNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.AgentNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.AgentNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    experimentid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.AgentNotification}
 */
proto.experiment.ml_server.AgentNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.AgentNotification;
  return proto.experiment.ml_server.AgentNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.AgentNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.AgentNotification}
 */
proto.experiment.ml_server.AgentNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExperimentid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.AgentNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.AgentNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.AgentNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.AgentNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExperimentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string experimentID = 1;
 * @return {string}
 */
proto.experiment.ml_server.AgentNotification.prototype.getExperimentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.AgentNotification} returns this
 */
proto.experiment.ml_server.AgentNotification.prototype.setExperimentid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.experiment.ml_server.AgentNotification.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.AgentNotification} returns this
 */
proto.experiment.ml_server.AgentNotification.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.DataCollectorNotification.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.DataCollectorNotification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.DataCollectorNotification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.DataCollectorNotification.toObject = function(includeInstance, msg) {
  var f, obj = {
    experimentid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.DataCollectorNotification}
 */
proto.experiment.ml_server.DataCollectorNotification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.DataCollectorNotification;
  return proto.experiment.ml_server.DataCollectorNotification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.DataCollectorNotification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.DataCollectorNotification}
 */
proto.experiment.ml_server.DataCollectorNotification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setExperimentid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.DataCollectorNotification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.DataCollectorNotification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.DataCollectorNotification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.DataCollectorNotification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExperimentid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string experimentID = 1;
 * @return {string}
 */
proto.experiment.ml_server.DataCollectorNotification.prototype.getExperimentid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.DataCollectorNotification} returns this
 */
proto.experiment.ml_server.DataCollectorNotification.prototype.setExperimentid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.experiment.ml_server.DataCollectorNotification.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.DataCollectorNotification} returns this
 */
proto.experiment.ml_server.DataCollectorNotification.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.toObject = function(opt_includeInstance) {
  return proto.experiment.ml_server.DataCollectorNotificationResponce.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.experiment.ml_server.DataCollectorNotificationResponce} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    setup: (f = msg.getSetup()) && proto.experiment.ml_server.ExperimentSetupRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.experiment.ml_server.DataCollectorNotificationResponce}
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.experiment.ml_server.DataCollectorNotificationResponce;
  return proto.experiment.ml_server.DataCollectorNotificationResponce.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.experiment.ml_server.DataCollectorNotificationResponce} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.experiment.ml_server.DataCollectorNotificationResponce}
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.experiment.ml_server.ExperimentSetupRequest;
      reader.readMessage(value,proto.experiment.ml_server.ExperimentSetupRequest.deserializeBinaryFromReader);
      msg.setSetup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.experiment.ml_server.DataCollectorNotificationResponce.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.experiment.ml_server.DataCollectorNotificationResponce} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSetup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.experiment.ml_server.ExperimentSetupRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.experiment.ml_server.DataCollectorNotificationResponce} returns this
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ExperimentSetupRequest setup = 2;
 * @return {?proto.experiment.ml_server.ExperimentSetupRequest}
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.getSetup = function() {
  return /** @type{?proto.experiment.ml_server.ExperimentSetupRequest} */ (
    jspb.Message.getWrapperField(this, proto.experiment.ml_server.ExperimentSetupRequest, 2));
};


/**
 * @param {?proto.experiment.ml_server.ExperimentSetupRequest|undefined} value
 * @return {!proto.experiment.ml_server.DataCollectorNotificationResponce} returns this
*/
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.setSetup = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.experiment.ml_server.DataCollectorNotificationResponce} returns this
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.clearSetup = function() {
  return this.setSetup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.experiment.ml_server.DataCollectorNotificationResponce.prototype.hasSetup = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.experiment.ml_server);
